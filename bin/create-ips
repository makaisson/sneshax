#!/usr/bin/env ruby

# Quick and dirty IPS generator.
# Based on http://www.smwiki.net/wiki/IPS_file_format

require 'shellwords'

original = ARGV.shift
modified = ARGV.shift

cmd = "cmp -l #{Shellwords.escape(original)} #{Shellwords.escape(modified)}"
diff = `#{cmd}`

if $?.success?
  $stderr.puts "files are idential: #{cmd}"
  exit 1
end

$verbose = false

output = "PATCH"

def flush(output, first_offset, bytes)
  return if bytes.empty?

  $stderr.puts "flushing #{bytes.length} bytes at #{first_offset}: #{bytes.inspect}" if $verbose

  record = ""

  # faux 3-byte unsigned int packing, by doing a 4-byte and lopping off the
  # start. Should error check this.
  record << [first_offset].pack("N")[1..-1]

  record << [bytes.length].pack("n") # 2-byte unsigned int
  record << bytes.pack("C*")          # 1-byte chars

  output << record
end

first_offset = nil
last_offset  = -2
bytes        = []

diff.each_line do |line|
  offset, _, new_value = *line.split(" ")
  # cmp outputs offset in decimal and values in octal. Ok...
  offset    = offset.to_i - 1
  new_value = new_value.to_i(8)

  if offset == last_offset + 1
    # Accumulate sequential bytes, since they can be represented with a single
    # IPS record.
    bytes << new_value
  else
    flush(output, first_offset, bytes)

    first_offset = offset
    bytes        = [new_value]
  end

  last_offset = offset
end

flush(output, first_offset, bytes)

output << "EOF"

print output
